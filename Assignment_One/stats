#!/bin/bash

# Program 1
# Author: Alexander Miranda
# Due Date: 10/09/2017
# Term: Fall 2017

# This program will compute the average and median from numbers
# supplied by a file or stdin. The program accepts a flag argument
# which specifies if the calculations are done per row or per column.

# Storing tmp file variable with pid appended
# Also storing temporary file names for average, median and final output 
# respectively
TMP=tmp$$
avgFile=avg$$
medFile=med$$
final=final$$

# Traps for the various ways the program can terminate
trap "rm -f $TMP*; exit 1" INT HUP TERM

trap "rm -f $TMP*" EXIT

# Function that outputs the proper use documentation to the user's terminal
instructions () {
	echo "$0 {-rows | -cols} [filename]" 1>&2
}

# Check if the user provided the proper amount of arguments
# will output the proper usage and will exit otherwise
if [[ $# < 1 || $# > 2 ]]; then
	instructions
	exit 1
fi

if [[ ! -z $2 && ! -r $2 ]]; then
	echo "$0: cannot read $2" 1>&2
	exit 1
fi

# Checks if the user wants the file/input to be parsed by rows
if [[ $1 == -r* ]]; then
	printf "Average\tMedian\n"

	# While loop to go line by line through the passed in input
	# checking if a new line exists to continue the iteration
	while read line || [ -n "$line" ]
	do
		sum=0
		count=0
		average=0
		median=0

		sorted_line=$(echo $line | tr " " "\n" | sort -g) 

		for i in $sorted_line
		do
			num=$i
			count=`expr $count + 1`
			sum=`expr $sum + $num`
		done

		mid_point=`expr $[ $count / 2 ] + 1`

		for num in $sorted_line
		do
			median=$num
			if [ $mid_point -le 1 ] 
			then
				break
			else
				mid_point=`expr $mid_point - 1`
			fi
		done

		average=`expr $[$sum + $[$count / 2]] / $count`
		printf "$average\t$median\n"
	done < "${2:-/dev/stdin}"
elif [[ $1 == -c* ]]; then
	column_num=

# Output the instructions for how to use the script if the user does not
# pass the proper flags and/or arguments
else
	instructions
	exit 1
fi
